#include <iostream>
#include <cstdlib>
#include <algorithm>
#include "VNS.hpp"
#include <limits> 

using namespace std;

VNS::VNS(Instance* inst) {
   m_instance = inst;	
}


VNS::~VNS(){
   // empty
}

void VNS::run(const bool verbose) {
   
   // generate constructive initial solution (Time-Oriented Nearest Neighbor)
   Solution s = tonn();

   // apply a descent on the move-customer-opt neighborhood
   int iterations = 0;
   bool local_minimum = false;
   do {
   		s = moveCustomerOpt(s,local_minimum);
   		iterations++;
   } while (!local_minimum);

   cout << "Iterations: " << iterations << endl;

   
   // unsigned n = 0, n_max = 2;
   // do {
   //    // Shake; Generate a point s' at random from the nth neighborhood of s
   //    // LocalSearch; Apply LS with s' as initial solution. Obtain s''.
   //    // Acceptance; If this is a local optimum, then s = s'', n = 0. Else n++.
   // } while (n < n_max);

   if (verbose) {
      s.print();
   }
   cout << "Total dist: " << s.getTotalDist() << endl;
   cout << "Vehicles used: " << s.getVehiclesUsed() << endl;
}

/*
	Implements the Time-Oriented Nearest Neighbor Heuristic (TONN)
	* starts at the first route
	* starting at the depot, searches for the nearest feasible customer to add to the current route
	* if there is no such customer, proceed to the next route
*/
Solution VNS::tonn() {
   Solution s(m_instance);
   
   unsigned unroutedCount = m_instance->getCustomers();
   vector<char> unrouted(unroutedCount+1, 1); // 1 if customer is unrouted, 0 otherwise
   unrouted[0] = 0;

   unsigned currentRoute = 0;
   unsigned previousCustomer = 0;
   while (unroutedCount > 0) {
   	// initialize "nearest" with the maximum value for double variables
      double nearest = std::numeric_limits<double>::max();
      unsigned nearestIndex = 0;
      
      for (unsigned i = 1; i <= m_instance->getCustomers(); i++) {
         if (unrouted[i] && m_instance->getDistance(previousCustomer, i) < nearest) {
            // Check feasibility (capacity and time-window)
            if (s.getRouteLoad(currentRoute) + m_instance->getDemand(i) <= m_instance->getCapacity()
             && s.getCustomerTime(previousCustomer) + m_instance->getDistance(previousCustomer, i) /*+ m_instance->getService(i)*/ <= m_instance->getEtw(i)) {
               	nearest = m_instance->getDistance(previousCustomer, i);
               	nearestIndex = i;
            }
         }
      }

      // Add nearest feasible customer to route
      if (nearestIndex > 0) {
         // cout << "Added " << nearestIndex << " to route " << currentRoute << endl;
         s.addToRoute(previousCustomer, nearestIndex, currentRoute);
         unroutedCount--;
         unrouted[nearestIndex] = 0;
         previousCustomer = nearestIndex;         
      }
      else { // Add new route if there isn't any feasible insertion
         // cout << "Created new route" << endl;
         currentRoute++;
         previousCustomer = 0;
      }
   }

   return s;
}

/*
	Implements the Relaxed version of the Time-Oriented Nearest Neighbor Heuristic (RTONN)
	* input: 		an incomplete route (that does not service all customers) generated by TONN
	* output: 		an infeasible route (breaking time-window constraints) that services all customers 
	* operation: 	repeatedly adds the overall nearest neighbor (all routes considered) to its respective route
*/
Solution VNS::rtonn(Solution s){
	
	unsigned unroutedCount = m_instance->getCustomers();
	vector<char> unrouted(unroutedCount+1, 1); // 1 if customer is unrouted, 0 otherwise
	unrouted[0] = 0;

	// lastCustomer[k] : the current last customer in the k-th route
	vector<unsigned> lastCustomer(s.getVehiclesUsed(),-1);

	// for each route k
	for(unsigned k = 0; k < s.getVehiclesUsed(); k++) {
		// for each customer in the k-th route
		unsigned cust = 0;
		for(unsigned i = 1; i < s.getRouteSize(k); i++) {
			cust = s.getSuccessor(cust,k);
			// mark 'cust' as routed and decrement the unrouted customers count
			unrouted[cust] = 0;
			unroutedCount--;

			if(i == s.getRouteSize(k)-1){
				lastCustomer[k] = cust;
			}
		}
	}

	// while there are unrouted customers
	while (unroutedCount > 0) {
   	  // initialize "nearest" with the maximum value for double variables
      double nearest = std::numeric_limits<double>::max();
      unsigned nearestIndex = -1;
      unsigned routeIndex = -1;

      // for each route k
      for(unsigned k = 0; k < s.getVehiclesUsed(); k++) {
      	// for each customer
      	for(unsigned i = 1; i <= m_instance->getCustomers(); i++){
      		// if client is unrouted and the current nearest neighbor among all routes
      		if (unrouted[i] && m_instance->getDistance(lastCustomer[k], i) < nearest) {
      			nearest = m_instance->getDistance(lastCustomer[k], i);
	            nearestIndex = i;
	            routeIndex = k;
      		}
      	}
      }

      // Add nearest feasible customer to route
      s.addToRoute(lastCustomer[routeIndex], nearestIndex, routeIndex);
      unroutedCount--;
      unrouted[nearestIndex] = 0;
      lastCustomer[routeIndex] = nearestIndex;
   }

   return s;
}

/*
   2opt local search (First improvement, O(n^3))
*/
void VNS::twoOpt(Solution& s, const unsigned k) {
   unsigned ci  = 0;
   do {
      unsigned cii = s.getSuccessor(ci, k);
      unsigned cj  = s.getSuccessor(cii, k);
      
      while (cii != 0 && cj != 0) {
         unsigned cjj = s.getSuccessor(cj, k);

         // Delta for the total route distance
         double delta = m_instance->getDistance(ci, cj)  + m_instance->getDistance(cii, cjj)
                      - m_instance->getDistance(ci, cii) - m_instance->getDistance(cj, cjj);


         // If the new route is shorter
         if (delta < 0) {
            // Check feasibility
            bool feasible = 1;
            // (1) Check new time at j;
            double arrival = max((double)m_instance->getBtw(cj), (s.getCustomerTime(ci) + m_instance->getDistance(ci,cj)));
            double departure = arrival + m_instance->getService(cj); 
            if (arrival > m_instance->getEtw(cj)) {
               feasible = 0;
               break;
            }
            
            // (2) then check from j-1 to i+1;
            unsigned currentCustomer = s.getPredecessor(cj, k);
            while (currentCustomer != ci) {
               arrival = max((double)m_instance->getBtw(currentCustomer), (departure + m_instance->getDistance(currentCustomer,s.getSuccessor(currentCustomer, k))));
               if (arrival > m_instance->getEtw(currentCustomer)) {
                  feasible = 0;
                  break;
               }
               departure = arrival + m_instance->getService(currentCustomer);
               currentCustomer = s.getPredecessor(currentCustomer, k);
            }
            if (!feasible) {
               break;
            }

            // (3) check new time at j+1;
            arrival = max((double)m_instance->getBtw(cjj), (departure + m_instance->getDistance(cii,cjj)));
            if (arrival > m_instance->getEtw(cjj)) {
               break;
            }
            departure = arrival + m_instance->getService(cjj);
            
            // (4) and then the rest of the route.
            currentCustomer = s.getSuccessor(cjj,k);
            while (currentCustomer != 0) {
               arrival = max((double)m_instance->getBtw(currentCustomer), (departure + m_instance->getDistance(currentCustomer,s.getPredecessor(currentCustomer, k))));
               if (arrival > m_instance->getEtw(currentCustomer)) {
                  feasible = 0;
                  break;
               }
               departure = arrival + m_instance->getService(currentCustomer);
               currentCustomer = s.getSuccessor(currentCustomer, k);
            }
            if (!feasible) {
               break;
            }

            
            // After all the feasibility checks, perform exchange
            s.exchange(ci, cj, k);
         }

         cj = cjj;
      }

      ci = cii;
   } while (ci != 0);
}

/*
   2opt local search (O(n^2))
*/
// void VNS::twoOpt(Solution& s, const unsigned k) {
//    // This method implements an approach to evaluate feasibility in constant time.
//    // See "Sequential and parallel local search for the time-constrained traveling salesman problem",
//    // (Kindervater et al., 1993) for proofs and explanations.

//    bool restart = 0;
//    unsigned ci  = 0;
//    do {
//       unsigned cii = s.getSuccessor(ci, k);
//       unsigned cj  = s.getSuccessor(cii, k);


//       // Travel time for the path i+1 to j-1
//       double T = 0;
//       // Waiting time for the path i+1 to j-1
//       double W = 0;
//       // Maximum forward shift in time that wouldn't cause infeasibility
//       double S = 0;
//       // TODO: W and S initialization
//       // double S = m_instance->getEtw(cii) -;


      
//       while (cii != 0 && cj != 0) {
//          unsigned cjj = s.getSuccessor(cj, k);
//          unsigned pcj = s.getPredecessor(cj,k);
         
//          // Departure time for cj
//          double dcj = m_instance->getService(cj) + max((double)m_instance->getBtw(cj), (s.getCustomerTime(ci) + m_instance->getDistance(ci,cj)));
//          // Departure time for the predecessor of cj (before the addition of the edge to j)
//          double dpcj = m_instance->getService(pcj) + max((double)m_instance->getBtw(pcj), (s.getCustomerTime(ci) + m_instance->getDistance(ci,pcj)));

//          // Difference between new and old arrival time at j-1
//          double d = dcj + m_instance->getDistance(pcj, cj) - dpcj;

         
//          // Update variables
//          T += m_instance->getDistance(pcj, cj) + m_instance->getService(pcj);
//          W = max(W - d, 0.0);
//          S = min((double)m_instance->getEtw(cj) - dcj, S - d); 


//          // Departure time for cjj after edge exchange
//          double dcjj = m_instance->getService(cjj) + max((double)m_instance->getBtw(cjj), (dcj + T + W + m_instance->getDistance(cii,cjj)));
//          // Departure time for cjj before the edge exchange
//          double current_dcjj = m_instance->getService(cjj) + max((double)m_instance->getBtw(cjj), (s.getCustomerTime(cj) + m_instance->getDistance(cj,cjj)));


//          // Delta for the total route distance
//          double delta = m_instance->getDistance(ci, cj)  + m_instance->getDistance(cii, cjj)
//                       - m_instance->getDistance(ci, cii) - m_instance->getDistance(cj, cjj);


//          // If the new route is shorter and feasible
//          if (delta < 0 && /*S >= 0 &&*/ dcjj < current_dcjj) {
//             // Perform exchange
//             s.exchange(ci,cj,k);
//             restart = 1;
//             break;
//          }

//          cj = cjj;
//       }

//       ci = cii;
      
//       // Restart the search if an improvement was found
//       if (restart) {
//          // Restart
//       }
//    } while (ci != 0);
// }

/*
	Implements a local search on the "move-customer" inter-route neighborhood
	* the move-customer neighborhood of S is defined as the set of solutions S' generated by removing one customer of its respective route and inserting it into another one
*/
Solution VNS::moveCustomerOpt(Solution s, bool& local_minimum){

	// shuffle the order in which customers are to be traversed in order to randomize the search
	vector<unsigned> shuffledCustomers(m_instance->getCustomers(),0);
	for(unsigned i = 0; i < m_instance->getCustomers(); i++){
		shuffledCustomers[i] = i+1;
	}
	random_shuffle(shuffledCustomers.begin(),shuffledCustomers.end());

	// for each customer 'i'
	for(unsigned i : shuffledCustomers){
		
		// get the route 'ki' to which customer 'i' belongs
		unsigned ki = s.getCustomerRoute(i);

		// for each other customer 'j' (including depot)
		for(unsigned j : shuffledCustomers){
			// get the route 'kj' to which customer 'j' belongs
			unsigned kj = s.getCustomerRoute(j);
			if(i != j && ki != kj){
				// check feasibility (capacity and time-window)
				if(s.getRouteLoad(kj) + m_instance->getDemand(i) <= m_instance->getCapacity()
					&& s.getCustomerTime(j) + m_instance->getDistance(j,i) <= m_instance->getEtw(i)){
					
					// d1: the cost of removing customer 'i' from route 'ki'
					double d1 = - m_instance->getDistance(s.getPredecessor(i,ki),i) - m_instance->getDistance(i,s.getSuccessor(i,ki)) + m_instance->getDistance(s.getPredecessor(i,ki),s.getSuccessor(i,ki));

					// d2: the cost of adding customer 'i' to route 'kj'
					double d2 = - m_instance->getDistance(j,s.getSuccessor(j,kj)) + m_instance->getDistance(j,i) + m_instance->getDistance(i,s.getSuccessor(j,kj));

					// check if current neighbor has a better cost
					if( d1 + d2 < 0 ){
						s.remFromRoute(s.getPredecessor(i,ki),i,ki);
						s.addToRoute(j,i,kj);
						local_minimum = false;
						return s;
					}
				}

			}
		}
	}

	/* a local minimum has been reached */
	local_minimum = true;
	return s;
}